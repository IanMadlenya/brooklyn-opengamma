{"name":"Brooklyn OpenGamma","tagline":"Brooklyn deployment and management of the OpenGamma financial analytics platform","body":"## Quick Start\r\n\r\n### Getting and Building\r\n\r\nYou must have the repo cloned or downloaded. To compile `brooklyn-opengamma` you'll need Maven 3 and Java 1.6 or higher, then simply run:\r\n\r\n* `mvn clean install` to build a JAR suitable for use with the Brooklyn CLI\r\n* `mvn clean assembly:single` to build a standalone executable JAR\r\n\r\n### Credentials\r\n\r\nTo run, you'll need to specify credentials for your preferred cloud.  This can be done in `~/.brooklyn/brooklyn.properties` using this syntax, shown here for AWS EC2:\r\n\r\n    brooklyn.jclouds.aws-ec2.identity = AAAAAAAAAAAA\r\n    brooklyn.jclouds.aws-ec2.credential = xxxxxxxxxxxxxxxxxxxxxxxx\r\n\r\nAlternatively these can be set as shell environment parameters or JVM system properties.\r\n\r\nMany other public clouds are supported, as well as groups of existing machines, custom endpoints for private and hybrid clouds, and specifying custom keys and passphrases. For more information see the section on _Locations_ in the [Brooklyn User Guide](http://brooklyn.io/use/guide/defining-applications/common-usage.html)\r\n\r\n### Running\r\n\r\nThe `mvn assembly:single` command creates a distribution archive named `brooklyn-opengamma-0.1.0-SNAPSHOT-bin.tar.gz`. Unpack this and run the demo as follows:\r\n\r\n    % cd target\r\n    % tar zxf brooklyn-opengamma-0.1.0-SNAPSHOT-bin.tar.gz\r\n    % cd brooklyn-opengamma-0.1.0-SNAPSHOT\r\n    % ./start.sh --location LOCATION\r\n\r\nWhere *LOCATION* is either:\r\n\r\n- A cloud or environment you've set up as above, such as `aws-ec2:us-east-1` : Not every environment has been tested, of course, but dependencies are fairly simple, mainly java and gcc, so it should be fairly portable, and quick to fix any targets which need attention. Let us know if we can help with some environment where this doesn't work! \r\n- `localhost` : This bundle can run on a localhost Linux or OS X system, standing up multiple processes, scaling out, and resilient to process failures (or deliberate kills). This requires passwordless `ssh localhost` access, and (for nginx) development tools including `gcc` and the `pcre` library. (On OS X this can usually be achieved by installing *XCode* and XCode Command-Line tools, both from Apple, and `sudo port install pcre` using MacPorts, or equivalent with brew.)  \r\n\r\nYou can also run the demo using the `brooklyn` CLI tool, similarly to how the [Brooklyn documentation](http://brooklyncentral.github.com/) describes running the examples, like this:\r\n\r\n    % export BROOKLYN_CLASSPATH=target/brooklyn-opengamma-0.1.0-SNAPSHOT.jar\r\n    % brooklyn launch --app io.cloudsoft.opengamma.OpenGammaCluster \\\r\n        --location aws-ec2:us-east-1\r\n\r\nAnd, of course, as it's just Java code, you can run it in any number of ways from an IDE, by accessing the `io.cloudsoft.opengamma.OpenGammaCluster` class and examining the `main` method.\r\n\r\n### Demo\r\n\r\nAfter about 5 minutes, when all the VMs have been created and the services have started, the console will print out a summary of the entire application state. This will include the OpenGamma web/view console URL, which should appear towards the end as the **webapp.url** property, like this:\r\n\r\n    service.state: running\r\n    webapp.url: http://ec2-54-28-5-19.compute.amazonaws.com:8000/\r\n    Policies:\r\n      {name=Controller targets tracker, running=true}\r\n\r\nIn the meantime you can follow the progress by opening the [Brooklyn console](http://localhost:8081) in your browser. In the console, you can:\r\n\r\n* See the sensors on the root of the **OpenGamma Cluster Application**, including a link to OpenGamma itself\r\n* Drill down into the individual OpenGamma servers, and see detailed metrics (search for *time* or *reqs*)\r\n* Step up to the parent nodes to see selected aggregated metrics (do the same search)\r\n* See the policies on the OG server nodes, on the DWAC parent, and on nginx \r\n* Observe the **Summary** for the server nodes; kill the process and/or the VM, and watch it get removed from nginx, the policies kick in to recover, and then the recovered node updated in nginx\r\n\r\nTo destroy the VMs provisioned, either invoke `stop` on the root of the application in the Brooklyn console or use the management console of your cloud.  VM's are not destroyed simply by killing Brooklyn.\r\n\r\n## Screenshots\r\n\r\n![Brooklyn Screenshot](https://raw.github.com/cloudsoft/brooklyn-opengamma/master/docs/screenshots/brooklyn.png)\r\n![OpenGamma Screenshot](https://raw.github.com/cloudsoft/brooklyn-opengamma/master/docs/screenshots/opengamma.png)\r\n\r\n## More about Brooklyn\r\n\r\nBrooklyn is a code library and framework for managing distributed applications in the cloud.  It has been used to create this project for rolling out OpenGamma, as well as many other distributed software packages.\r\n\r\nThis project can be extended for more complex topologies, additional applications which run alongside OpenGamma core, and to develop sophisticated management policies to scale or tune the cluster for specific applications.\r\n\r\nFor more information consider:\r\n\r\n* Visiting the open-source Brooklyn [home page](http://brooklyncentral.github.com)\r\n* Forking the Brooklyn project on [GitHub](http://github.com/brooklyncentral/brooklyn)\r\n* Joining the Brooklyn [discussion list](https://groups.google.com/forum/#!forum/brooklyn-users) \r\n\r\nFor commercial enquiries including bespoke development and paid support contact [Cloudsoft Corp.](http://www.cloudsoftcorp.com/), the supporters of Brooklyn, at **[info@cloudsoftcorp.com](mailto:info@cloudsoftcorp.com)**.\r\n\r\n***\r\n\r\nThis software is Copyright 2013 by Cloudsoft Corp.; Released as open source under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0).","google":"UA-15947686-1","note":"Don't delete this file! It's used internally to help with page regeneration."}