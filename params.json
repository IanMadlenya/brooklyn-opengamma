{"name":"Brooklyn OpenGamma","tagline":"Deployment and management of the OpenGamma financial analytics platform using Brooklyn.","body":"## Quick Start\r\n\r\nThis project uses [OpenGamma](http://www.opengamma.com/) to illustrate\r\ndeploying and managing a set of dependent software services with\r\nBrooklyn to provide a scalable application platform.\r\n\r\n### Getting and Building\r\n\r\nYou must first have the `brooklyn-opengamma` repository cloned or\r\ndownloaded. To compile the project you'll need Maven 3 and Java 1.6 or\r\nhigher installed, then simply run the following commands:\r\n\r\n    % git clone https://github.com/cloudsoft/brooklyn-opengamma.git\r\n    % cd brooklyn-opengamma\r\n    % mvn clean install\r\n    % mvn assembly:single\r\n\r\nThis will build a Jar file suitable for use with the Brooklyn CLI,\r\nand the last command will create a standalone distribution with the\r\nBrooklyn manager embedded.\r\n\r\n### Credentials\r\n\r\nTo run, you'll need to specify credentials for your preferred cloud.  This\r\ncan be done in `~/.brooklyn/brooklyn.properties` using this syntax, shown\r\nhere for AWS EC2:\r\n\r\n    brooklyn.jclouds.aws-ec2.identity = AAAAAAAAAAAA\r\n    brooklyn.jclouds.aws-ec2.credential = xxxxxxxxxxxxxxxxxxxxxxxx\r\n\r\nAlternatively these can be set as shell environment parameters or JVM\r\nsystem properties.\r\n\r\nMany other public clouds are supported, as well as groups of existing\r\nmachines, custom endpoints for private and hybrid clouds, and specifying\r\ncustom keys and passphrases. For more information see the section on\r\n_Locations_ in the [Brooklyn User Guide](http://brooklyn.io/use/guide/defining-applications/common-usage.html)\r\n\r\n### Running\r\n\r\nThe `mvn assembly:single` command creates a distribution archive named\r\n`brooklyn-opengamma-0.1.0-SNAPSHOT-bin.tar.gz`. Unpack this and run the\r\ndemo as follows:\r\n\r\n    % cd target\r\n    % tar zxf brooklyn-opengamma-0.1.0-SNAPSHOT-bin.tar.gz\r\n    % cd brooklyn-opengamma-0.1.0-SNAPSHOT\r\n    % ./start.sh --location LOCATION\r\n\r\nWhere *LOCATION* is either:\r\n\r\n- A cloud or environment you've set up as above, such as `aws-ec2:us-east-1`.\r\n    Not every environment has been tested, of course, but requirements are\r\n    fairly straightforward, mainly java and gcc, so it should be fairly\r\n    portable, and quick to fix any targets which need attention. Let us know if\r\n    we can help with some environment where this doesn't work!\r\n- `localhost`. This application can run on a local Linux or OS X system,\r\n    standing up multiple processes, scaling them out, and is resilient to process\r\n    failures (or deliberate kills). This requires passwordless `ssh localhost`\r\n    access, and (for nginx) development tools including `gcc` and the `pcre`\r\n    library. (On OS X this can usually be achieved by installing *XCode* and\r\n    *XCode Command-Line tools*, both from Apple, and `sudo port install pcre`\r\n    using *MacPorts*, or the equivalent with *Brew*.)\r\n\r\nYou can also run the demo using the `brooklyn` command-line tool, using the same\r\ntechniques as described in the Brooklyn documentation for [running the\r\nexamples](http://brooklyncentral.github.io/use/examples/index.html), like this:\r\n\r\n    % export BROOKLYN_CLASSPATH=target/brooklyn-opengamma-0.1.0-SNAPSHOT.jar\r\n    % brooklyn launch --app io.cloudsoft.opengamma.OpenGammaCluster \\\r\n        --location aws-ec2:us-east-1\r\n\r\nAnd, of course, as it's just Java code, you can run it in any number of\r\nways from an IDE, by accessing the `io.cloudsoft.opengamma.OpenGammaCluster`\r\nclass and examining the `main` method.\r\n\r\n### Demo\r\n\r\nAfter about 5 minutes, when all the VMs have been created and the services\r\nhave started, the console will print out a summary of the entire\r\napplication state. This will include the OpenGamma console URL,\r\nwhich should appear towards the end, as the **webapp.url** property, like\r\nthis:\r\n\r\n    service.state: running\r\n    webapp.url: http://ec2-54-28-5-19.compute.amazonaws.com:8000/\r\n    Policies:\r\n      {name=Controller targets tracker, running=true}\r\n\r\nIn the meantime you can follow the progress by opening the Brooklyn\r\nconsole at <http://localhost:8081/> in your browser. In the console, you can:\r\n\r\n* See the *Sensors* on the root of the **OpenGamma Cluster Application**,\r\n    including a link to OpenGamma itself\r\n* View the entities representing the **ActiveMQBroker** and **PostgreSqlNode**\r\n    messaging and database servers\r\n* Drill down into the individual **OpenGamma Server**s, and see detailed\r\n    metrics (search for *time* or *reqs*)\r\n* Step up to the parent nodes to see selected aggregated metrics (do the\r\n    same search)\r\n* See the *Policies* on the **OpenGamma Server** nodes, on the\r\n    **DynamicWebAppCluster** parent, and on the **NginxController**\r\n\r\nIf you kill the process and/or the VM for a server, you will see it get removed\r\nfrom the **proxy.serverpool.targets** list on the **NginxController**. The\r\n**ServiceReplacer** policy will kick in to create a new node, which is then\r\nadded to the cluster again.\r\n\r\nTo destroy the VMs provisioned, either invoke `stop` on the root of the\r\napplication in the Brooklyn console or use the management console of your\r\ncloud.  VMs are not destroyed simply by killing the Brooklyn process.\r\n\r\n## Screenshots\r\n\r\n![Brooklyn Screenshot](https://raw.github.com/cloudsoft/brooklyn-opengamma/master/docs/screenshots/brooklyn.png)\r\n![OpenGamma Screenshot](https://raw.github.com/cloudsoft/brooklyn-opengamma/master/docs/screenshots/opengamma.png)\r\n\r\n## More about Brooklyn\r\n\r\n[Brooklyn](https://github.com/brooklyncentral/brooklyn/) is a Java library\r\nand framework for managing distributed applications in the cloud. It has\r\nbeen used to create this project for rolling out OpenGamma, as well as\r\nmany other distributed software packages.\r\n\r\nThis project can be extended for more complex topologies, additional\r\napplications which run alongside OpenGamma core, and to develop\r\nsophisticated management policies to scale or tune the cluster for specific\r\napplications.\r\n\r\nFor more information on the open-source Brooklyn project visit <http://brooklyn.io/> or:\r\n\r\n- [Fork the code on GitHub](https://github.com/brooklyncentral/brooklyn/fork)\r\n- [Join the brooklyn-users discussion group](https://groups.google.com/forum/#!forum/brooklyn-users) \r\n\r\nFor commercial enquiries including bespoke development and paid support\r\ncontact [Cloudsoft Corp.](http://www.cloudsoftcorp.com/), the supporters of\r\nBrooklyn, at **[info@cloudsoftcorp.com](mailto:info@cloudsoftcorp.com)**.\r\n\r\n***\r\n\r\nThis software is Copyright 2013 by Cloudsoft Corp.; Released as open source\r\nunder the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0).","google":"UA-15947686-1","note":"Don't delete this file! It's used internally to help with page regeneration."}